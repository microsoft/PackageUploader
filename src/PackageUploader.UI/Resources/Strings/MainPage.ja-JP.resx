<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationName" xml:space="preserve">
    <value>Xbox ゲームパッケージマネージャー</value>
  </data>
  <data name="ChooseTenantButtonText" xml:space="preserve">
    <value>詳細設定：利用可能なテナントを一覧表示</value>
  </data>
  <data name="MakeAPackageBodyTextOne" xml:space="preserve">
    <value>ゲームパッケージはアップロードを高速化し、安全なインストールを確保し、Xbox のパフォーマンスを最適化します。ビルドファイルと構成ファイルを追加するだけで</value>
    <comment>The part of the string that needs to come before the hyperlink (if any)</comment>
  </data>
  <data name="MakeAPackageBodyTextTwo" xml:space="preserve">
    <value>、その後アップロードします。</value>
    <comment>The part of the string that comes after the hyperlink, if any.</comment>
  </data>
  <data name="MakeAPackageBodyURLText" xml:space="preserve">
    <value>(詳細情報)</value>
  </data>
  <data name="MakeAPackageButtonText" xml:space="preserve">
    <value>パッケージを作成</value>
  </data>
  <data name="MakeAPackageTextBlockTitle" xml:space="preserve">
    <value>パッケージを作る</value>
  </data>
  <data name="MakePackageNotFoundErrorMsg" xml:space="preserve">
    <value>MakePkg.exe が見つかりません。ゲームコンテンツをパッケージ化するには GDK をインストールしてください。</value>
  </data>
  <data name="SignInButtonContent" xml:space="preserve">
    <value>サインイン</value>
  </data>
  <data name="SignInLogginInText" xml:space="preserve">
    <value>サインイン情報を取得しようとしています。数秒以内にブラウザページが開かない場合は、サインインボタンをもう一度クリックして再試行してください。</value>
  </data>
  <data name="SignInPreLoginText" xml:space="preserve">
    <value>製品 ID や公開先へのシームレスなアクセスについては、Microsoft パートナーセンターのアカウントにサインインしてください。構成なしでゲームパッケージを作成するだけの場合、この手順は任意ですが、パッケージのアップロード、製品 ID の取得、または構成ファイルへのリンクを予定している場合は必須です。</value>
  </data>
  <data name="SignInTextBlockTitle" xml:space="preserve">
    <value>サインイン</value>
  </data>
  <data name="SubTitleTextBlock" xml:space="preserve">
    <value>パッケージ作成ツールは、ゲームファイル、アセット、およびメタデータを構造化されたパッケージにバンドルし、より高速で信頼性の高いアップロードのための一貫性とコンプライアンスを確保します。</value>
  </data>
  <data name="TitleTextBlock" xml:space="preserve">
    <value>パッケージを作成して Microsoft パートナーセンターにアップロード</value>
  </data>
  <data name="UploadPackageBlockBody" xml:space="preserve">
    <value>ゲームパッケージをパートナーセンターにアップロードして、Xbox 上で配布および管理します。完成したパッケージと Microsoft アカウントから始めましょう。</value>
  </data>
  <data name="UploadPackageBlockButtonText" xml:space="preserve">
    <value>パッケージをアップロード</value>
  </data>
  <data name="UploadPackageBlockTitle" xml:space="preserve">
    <value>パッケージをアップロード（サインインが必要）</value>
  </data>
</root>