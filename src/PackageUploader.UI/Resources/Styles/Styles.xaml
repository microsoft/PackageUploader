<?xml version="1.0" encoding="UTF-8" ?>
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Global Font Family -->
    <Style TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="Segoe Sans" />
    </Style>

    <!-- TextBlock Styles -->
    <Style x:Key="Headline" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FontSize" Value="26" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="SemiBold" />
    </Style>

    <Style x:Key="SubHeadline" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center" />
    </Style>

    <!-- Button Style -->
    <Style TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryButtonBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryButtonHoverBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="14,8" />
        <Setter Property="MinHeight" Value="34" />
        <Setter Property="MinWidth" Value="34" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" 
                            CornerRadius="8" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
                <Setter Property="Background" Value="{DynamicResource SecondaryButtonDisabledBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryButtonHoverBrush}" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryButtonClickedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style for the primary button -->
    <Style x:Key="PrimaryButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryButtonHoverBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="14,8" />
        <Setter Property="MinHeight" Value="34" />
        <Setter Property="MinWidth" Value="34" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" 
                            CornerRadius="8"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" 
                                  VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
                <Setter Property="Background" Value="{DynamicResource PrimaryButtonDisabledBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryButtonHoverBrush}" />
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryButtonClickedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for a chromeless hyperlink-like button -->
    <Style x:Key="HyperlinkButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Text="{TemplateBinding Content}" 
                               Foreground="{TemplateBinding Foreground}" 
                               Cursor="Hand" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SecondaryButtonHoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for a chromeless hyperlink-like button that is underlined -->
    <Style x:Key="HyperlinkUnderlinedButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Text="{TemplateBinding Content}" 
                               Foreground="{TemplateBinding Foreground}"
                               TextDecorations="Underline"
                               Cursor="Hand" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SecondaryButtonHoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for a chromeless hyperlink-like button that is underlined and inline in other text -->
    <Style x:Key="HyperlinkUnderlinedInlineButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0, -10, 0, 0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Text="{TemplateBinding Content}" 
                           Foreground="{TemplateBinding Foreground}"
                           TextDecorations="Underline"
                           Cursor="Hand" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SecondaryButtonHoverBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- New style for help menu items -->
    <Style x:Key="HelpMenuItemStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="10,2" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightedComboBoxItemBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TextBox Style -->
    <Style TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="44" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryTextBrush}" />
        <Setter Property="Padding" Value="5" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ToggleButton Style -->
    <Style x:Key="CustomToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="Border"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            Padding="0"
                            CornerRadius="6">
                        <Grid>
                            <Path x:Name="Arrow"
                                  Data="M0.56612 5.13837C0.770099 4.93439 1.09176 4.91982 1.31255 5.09466L1.36161 5.13837L8.05198 11.8285L14.7263 5.15408C14.9303 4.9501 15.2519 4.93553 15.4727 5.11037L15.5218 5.15408C15.7258 5.35806 15.7403 5.67972 15.5655 5.90051L15.5218 5.94957L8.44955 13.0218C8.24557 13.2258 7.92391 13.2403 7.70312 13.0655L7.65406 13.0218L0.56612 5.93386C0.34645 5.71419 0.34645 5.35804 0.56612 5.13837Z"
                                  Fill="Transparent"
                                  Stroke="{DynamicResource PrimaryTextBrush}"
                                  Height="16"
                                  Width="16"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SecondaryTextBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SecondaryTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox Style -->
    <Style TargetType="ComboBox">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryTextBrush}" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="44" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Advanced ComboBox style -->
    <Style x:Key="CustomComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Border 
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="6"
                            Padding="10,0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter 
                                    Margin="5,0"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left"
                                    Content="{TemplateBinding SelectionBoxItem}" />
                                <ToggleButton 
                                    Grid.Column="1"
                                    Style="{StaticResource CustomToggleButtonStyle}"
                                    Focusable="False"
                                    IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press" />
                            </Grid>
                        </Border>
                        <Popup 
                            x:Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True"
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Border 
                                Background="{DynamicResource AppBackgroundBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                CornerRadius="8"
                                Margin="5">
                                <Border.Effect>
                                    <DropShadowEffect Color="{DynamicResource DropShadowComboBoxItemColor}" BlurRadius="12" ShadowDepth="2" Opacity="0.40"/>
                                </Border.Effect>
                                <ScrollViewer>
                                    <ItemsPresenter />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderHighlightBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for ComboBox Items -->
    <Style TargetType="ComboBoxItem">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Margin" Value="6" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border 
                        x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        CornerRadius="6">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource HighlightedComboBoxItemBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ProgressBar Style -->
    <Style TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource ProgressBarForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource ProgressBarBackgroundBrush}" />
        <Setter Property="Height" Value="10" />
    </Style>

    <!-- Border Style -->
    <Style TargetType="Border">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

    <!-- Expander Style -->
    <Style x:Key="ExpanderHeaderStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Path x:Name="arrow" 
                                    Fill="{DynamicResource PrimaryTextBrush}" 
                                    Data="M 0 0 L 4 4 L 8 0 Z" 
                                    HorizontalAlignment="Center" 
                                    VerticalAlignment="Center" 
                                    Margin="5,0,5,0"/>
                        <ContentPresenter Grid.Column="1" 
                                                VerticalAlignment="Center" 
                                                ContentSource="Content"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="arrow" Property="Data" Value="M 0 4 L 4 0 L 8 4 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Updated Expander Style -->
    <Style x:Key="CustomExpanderStyle" TargetType="Expander">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" 
                                            DockPanel.Dock="Top" 
                                            Content="{TemplateBinding Header}" 
                                            Style="{StaticResource ExpanderHeaderStyle}" 
                                            IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="ExpandSite" 
                                                Visibility="Collapsed" 
                                                ContentSource="Content" 
                                                Margin="10,0,0,0"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
