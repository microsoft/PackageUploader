<?xml version="1.0" encoding="UTF-8" ?>
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- TextBlock Styles -->
    <Style x:Key="Headline" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FontSize" Value="32" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style x:Key="SubHeadline" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Center" />
    </Style>

    <!-- Button Style -->
    <Style TargetType="Button">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="14,10" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="44" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" 
                            CornerRadius="8" 
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Gray300Brush}" />
                <Setter Property="Background" Value="{DynamicResource Gray600Brush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryButtonBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for a chromeless hyperlink-like button -->
    <Style x:Key="HyperlinkButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Text="{TemplateBinding Content}" 
                               Foreground="{TemplateBinding Foreground}" 
                               Cursor="Hand" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryButtonBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for a chromeless hyperlink-like button that is underlined -->
    <Style x:Key="HyperlinkUnderlinedButtonStyle" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Text="{TemplateBinding Content}" 
                               Foreground="{TemplateBinding Foreground}" 
                               TextDecorations="Underline"
                               Cursor="Hand" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryButtonBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- TextBox Style -->
    <Style TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="44" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource Gray300Brush}" />
        <Setter Property="Padding" Value="5" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Gray300Brush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- CheckBox Style -->
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="44" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Gray300Brush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ToggleButton Style -->
    <Style x:Key="CustomToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border 
                    x:Name="Border"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    BorderThickness="0"
                    Padding="0"
                    CornerRadius="6">
                        <Grid>
                            <Path 
                            x:Name="Arrow"
                            Data="M 0 0 L 6 6 L 12 0"
                            Fill="Transparent"
                            Stroke="White"
                            StrokeThickness="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="#B8B4FF" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="#6B7584" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox Style -->
    <Style TargetType="ComboBox">
        <Setter Property="Foreground" Value="{DynamicResource Gray300Brush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource Gray300Brush}" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="44" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Gray300Brush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Advanced ComboBox style -->
    <Style x:Key="CustomComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Border 
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="6"
                            Padding="10,0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter 
                                    Margin="5,0"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left"
                                    Content="{TemplateBinding SelectionBoxItem}" />
                                <ToggleButton 
                                    Grid.Column="1"
                                    Style="{StaticResource CustomToggleButtonStyle}"
                                    Focusable="False"
                                    IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press" />
                            </Grid>
                        </Border>
                        <Popup 
                            x:Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True"
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Border 
                                Background="{DynamicResource Gray900Brush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="6">
                                <ScrollViewer>
                                    <ItemsPresenter />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#B8B4FF" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="#B8B4FF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ListBox Style -->
    <Style TargetType="ListBox">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource Gray300Brush}" />
    </Style>

    <!-- RadioButton Style -->
    <Style TargetType="RadioButton">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="44" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Gray300Brush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ProgressBar Style -->
    <Style TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource Gray200Brush}" />
        <Setter Property="Height" Value="10" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Gray300Brush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Border Style -->
    <Style TargetType="Border">
        <Setter Property="BorderBrush" Value="{DynamicResource Gray300Brush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

    <!-- Expander Style -->
    <Style x:Key="ExpanderHeaderStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Path x:Name="arrow" 
                                    Fill="White" 
                                    Data="M 0 0 L 4 4 L 8 0 Z" 
                                    HorizontalAlignment="Center" 
                                    VerticalAlignment="Center" 
                                    Margin="5,0,5,0"/>
                        <ContentPresenter Grid.Column="1" 
                                                VerticalAlignment="Center" 
                                                ContentSource="Content"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="arrow" Property="Data" Value="M 0 4 L 4 0 L 8 4 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Updated Expander Style -->
    <Style x:Key="CustomExpanderStyle" TargetType="Expander">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" 
                                            DockPanel.Dock="Top" 
                                            Content="{TemplateBinding Header}" 
                                            Style="{StaticResource ExpanderHeaderStyle}" 
                                            IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="ExpandSite" 
                                                Visibility="Collapsed" 
                                                ContentSource="Content" 
                                                Margin="10,0,0,0"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
